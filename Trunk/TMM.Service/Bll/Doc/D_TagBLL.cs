//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.BLL.cst at 2010-11-29 15:51:35
//				By xincai.wu
//==============================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using TMM.Model;

namespace TMM.Service.Bll.Doc {

	/// <summary>
    /// 名称：DTagDao 逻辑层
    /// 创建者：
    /// 创建时间：2010-11-29 19:12:38
    /// 功能描述：
    /// </summary>
    public partial class D_TagBLL {

	Dal.Doc.D_TagDal dal = new Dal.Doc.D_TagDal();

		/// <summary>
        /// 取得记录数
        /// </summary>
        /// <param name="param">可选参数为：</param>
        /// <returns></returns>
		public int GetCount(Hashtable param) {
			return dal.GetCount(param);
		}

		/// <summary>
        /// 提取数据
        /// </summary>
        /// <param name="param">可选参数为：</param>
        /// <param name="orderBy">排序方式:默认为“TagId asc”</param>
        /// <param name="first">起始记录：从0开始</param>
        /// <param name="rows">提取的条数</param>
        /// <returns></returns>
		public IList<D_Tag> GetList(Hashtable param,string orderBy,int first,int rows) 
		{
			return dal.GetList(param, orderBy, first, rows);
		}
		
		/// <summary>
        /// 提取数据
        /// </summary>
        /// <param name="tagId"></param>
        /// <returns></returns>
		public D_Tag Get(Int32 tagId) {
			return dal.Get(tagId);
		}

		/// <summary>
        /// 插入数据
        /// </summary>
        /// <param name="obj">对象</param>
        /// <returns>返回：该条数据的主键Id</returns>
		public int Insert(D_Tag obj) {
			return dal.Insert(obj);
		}
		
		/// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="obj"></param>
        /// <returns>返回：ture 成功，false 失败</returns>
		public bool Update(D_Tag obj) {
			return dal.Update(obj);
		}
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="tagId"></param>
        /// <returns>返回：ture 成功，false 失败</returns>
		public bool Delete(Int32 tagId) {
			return dal.Delete(tagId);
		}
        public D_Tag Get(string tagName) {
            return dal.Get(tagName);
        }
        /// <summary>
        /// 通过文章的标签字段来更新标签表，标签存在更新数量，不存在新增标签
        /// </summary>
        /// <param name="tags"></param>
        public void UpdateFromDoc(string[] tags,int docId) 
        {
            D_Rel_DocTagBLL drBll = new D_Rel_DocTagBLL();
            //先删除该文档的关联关系 
            drBll.DeleteDoc(docId);

            foreach (string s in tags) {
                if (!string.IsNullOrEmpty(s.Trim()))
                {
                    int tagId = 0;
                    Hashtable p = new Hashtable();
                    p.Add("Tag", s);
                    IList<D_Tag> list = GetList(p, null, 0, 1);
                    if (list.Count > 0)
                    {
                        tagId = list[0].TagId;
                        D_Tag oldTag = list[0];
                        oldTag.UseCount += 1;
                        Update(oldTag);
                    }
                    else
                    {
                        D_Tag tag = new D_Tag()
                        {
                            Tag = s,
                            UseCount = 1
                        };
                        tagId = Insert(tag);

                    }
                    //写入文档-标签关联表
                    D_Rel_DocTag dr = new D_Rel_DocTag()
                    {
                        DocId = docId,
                        TagId = tagId
                    };

                    drBll.Insert(dr);
                }
            }
        }
	}

}
