//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.BLL.cst at 2011-1-10 10:09:48
//				By xincai.wu
//==============================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using TMM.Model;

namespace TMM.Service.Bll.Doc {

	/// <summary>
    /// 名称：MFavoriteDao 逻辑层
    /// 创建者：
    /// 创建时间：2011-1-9 11:06:52
    /// 功能描述：
    /// </summary>
    public partial class MFavoriteBLL {

	Dal.Doc.MFavoriteDal dal = new Dal.Doc.MFavoriteDal();

		/// <summary>
        /// 取得记录数
        /// </summary>
        /// <param name="param">可选参数为：</param>
        /// <returns></returns>
		public int GetCount(Hashtable param) {
			return dal.GetCount(param);
		}
        /// <summary>
        /// 获取某用户某分类下收藏的文档总数
        /// </summary>
        /// <returns></returns>
        public int GetCataDocCount(int userId, int cataId)
        {
            Hashtable p = new Hashtable();
            p.Add("UserId", userId);
            p.Add("FavCateId", cataId);
            return GetCount(p);
        }
		/// <summary>
        /// 提取数据
        /// </summary>
        /// <param name="param">可选参数为：</param>
        /// <param name="orderBy">排序方式:默认为“FavId asc”</param>
        /// <param name="first">起始记录：从0开始</param>
        /// <param name="rows">提取的条数</param>
        /// <returns></returns>
		public IList<MFavorite> GetList(Hashtable param,string orderBy,int first,int rows) 
		{
			return dal.GetList(param, orderBy, first, rows);
		}
        public IList<MFavorite> GetList(int docId)
        {
            Hashtable p = new Hashtable();
            p.Add("DocId",docId);
            return GetList(p, null, 0, 1);
            
        }
        /// <summary>
        /// 查询收藏列表，链接文档表和用户表
        /// </summary>
        /// <param name="first"></param>
        /// <param name="rows"></param>
        /// <param name="count"></param>
        /// <param name="userId"></param>
        /// <param name="favCateId"></param>
        /// <returns></returns>
        public IList<MFavorite> GetListByUserId(int first,int rows,out int count,int userId, int? favCateId) {
            Hashtable p = new Hashtable();
            p.Add("UserId",userId);
            if (favCateId.HasValue)
                p.Add("FavCateId",favCateId.Value);
            count = GetCount(p);
            return GetList(p, null, first, rows);
        }
        /// <summary>
        /// 查询收藏列表，链接文档表和用户表，不需要分页
        /// </summary>
        /// <param name="first"></param>
        /// <param name="rows"></param>
        /// <param name="userId"></param>
        /// <param name="favCateId"></param>
        /// <returns></returns>
        public IList<MFavorite> GetListByUserId(int first, int rows, int userId, int? favCateId)
        {
            Hashtable p = new Hashtable();
            p.Add("UserId", userId);
            if (favCateId.HasValue)
                p.Add("FavCateId", favCateId.Value);
            return GetList(p, null, first, rows);
        }
		/// <summary>
        /// 提取数据
        /// </summary>
        /// <param name="favId"></param>
        /// <returns></returns>
		public MFavorite Get(Int32 favId) {
			return dal.Get(favId);
		}

		/// <summary>
        /// 插入数据
        /// </summary>
        /// <param name="obj">对象</param>
        /// <returns>返回：该条数据的主键Id</returns>
		public int Insert(MFavorite obj) {
			return dal.Insert(obj);
		}
		
		/// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="obj"></param>
        /// <returns>返回：ture 成功，false 失败</returns>
		public bool Update(MFavorite obj) {
			return dal.Update(obj);
		}
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="favId"></param>
        /// <returns>返回：ture 成功，false 失败</returns>
		public bool Delete(Int32 favId) {
			return dal.Delete(favId);
		}
        /// <summary>
        /// 将收藏的文档改变收藏目录
        /// </summary>
        /// <param name="favId"></param>
        /// <param name="favCateId"></param>
        public void MoveFolder(int favId, int favCateId) {
            dal.MoveFolder(favId, favCateId);
        }
	}

}
