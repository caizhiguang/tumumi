//==============================================================================
//	CAUTION: This file is generated by IBatisNetGen.BLL.cst at 2011-1-10 10:09:48
//				By xincai.wu
//==============================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using TMM.Model;

namespace TMM.Service.Bll.Doc {

	/// <summary>
    /// 名称：DDocInfoDao 逻辑层
    /// 创建者：
    /// 创建时间：2011-1-9 11:06:52
    /// 功能描述：
    /// </summary>
    public partial class DDocInfoBLL {

	Dal.Doc.DDocInfoDal dal = new Dal.Doc.DDocInfoDal();

		/// <summary>
        /// 取得记录数
        /// </summary>
        /// <param name="param">可选参数为：</param>
        /// <returns></returns>
		public int GetCount(Hashtable param) {
			return dal.GetCount(param);
		}
        /// <summary>
        /// 获取某用户某分类下文档总数
        /// </summary>
        /// <returns></returns>
        public int GetCataDocCount(int userId,int cataId) {
            Hashtable p = new Hashtable();
            p.Add("UserId",userId);
            p.Add("UserCateId",cataId);
            return GetCount(p);
        }
        /// <summary>
        /// 获取某用户的通过审核的文档总数
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public int GetCountByUser(int userId) {
            Hashtable p = new Hashtable();
            p.Add("UserId", userId);
            p.Add("IsAudit",true);
            return GetCount(p);
        }

		/// <summary>
        /// 提取数据
        /// </summary>
        /// <param name="param">可选参数为：</param>
        /// <param name="orderBy">排序方式:默认为“DocId asc”</param>
        /// <param name="first">起始记录：从0开始</param>
        /// <param name="rows">提取的条数</param>
        /// <returns></returns>
		public IList<DDocInfo> GetList(Hashtable param,string orderBy,int first,int rows) 
		{
			return dal.GetList(param, orderBy, first, rows);
		}
        /// <summary>
        /// 获取最新文档列表
        /// </summary>
        /// <param name="first"></param>
        /// <param name="rows"></param>
        /// <returns></returns>
        public IList<DDocInfo> GetNewList(int first, int rows)
        {
            Hashtable p = new Hashtable();
            p.Add("IsAudit",true);
            p.Add("IsTaskDoc",false);
            return GetList(p, "CreateTime DESC", first, rows);
        }
        /// <summary>
        /// 列表for搜索，标题模糊匹配
        /// </summary>
        /// <param name="key"></param>
        /// <param name="first"></param>
        /// <param name="rows"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        public IList<DDocInfo> GetList(string key, int first, int rows, out int count) 
        {
            Hashtable p = new Hashtable();
            p.Add("LikeTitle",key);
            count = GetCount(p);
            return GetList(p, null, first, rows);
        }
        /// <summary>
        /// 获取某用户的文档
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="count"></param>
        /// <param name="first"></param>
        /// <param name="rows"></param>
        /// <returns></returns>
        public IList<DDocInfo> GetListByUser(int userId, out int count,int first,int rows,string keyword,int? userCataId,bool? isAudit) 
        {
            Hashtable p = new Hashtable();
            p.Add("UserId",userId);
            if (!string.IsNullOrEmpty(keyword))
                p.Add("LikeTitle",keyword);
            if (userCataId.HasValue)
                p.Add("UserCateId",userCataId.Value);
            if (isAudit.HasValue)
                p.Add("IsAudit",isAudit.Value);
            p.Add("IsTaskDoc",false);
            count = GetCount(p);
            return GetList(p, null, first, rows);
        }
        /// <summary>
        /// 获取某文档owner的其他文档
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="first"></param>
        /// <param name="rows"></param>
        /// <param name="exceptDocId"></param>
        /// <returns></returns>
        public IList<DDocInfo> GetListByUser(int userId, int first, int rows, int exceptDocId) 
        {
            Hashtable p = new Hashtable();
            p.Add("UserId",userId);
            p.Add("ExceptDocId",exceptDocId);
            p.Add("IsAudit",true);
            return GetList(p, null, first, rows);
        }
        /// <summary>
        /// 获取某用户通过审核的最近N条文档
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="rows"></param>
        /// <returns></returns>
        public IList<DDocInfo> GetListByUser(int userId, int rows) {
            Hashtable p = new Hashtable();
            p.Add("UserId",userId);
            p.Add("IsAudit",true);
            return GetList(p, null, 0, rows);
        }
		
		/// <summary>
        /// 提取数据
        /// </summary>
        /// <param name="docId"></param>
        /// <returns></returns>
		public DDocInfo Get(Int32 docId) {
			return dal.Get(docId);
		}
        public DDocInfo Get(Int32 docId, Int32 userId) {
            Hashtable p = new Hashtable();
            p.Add("DocId",docId);
            p.Add("UserId",userId);
            IList<DDocInfo> list = GetList(p, null, 0, 1);
            if (list.Count > 0)
            {
                return list[0];
            }
            else
                return null;
        }
        /// <summary>
        /// 通过文件GUID获取文档
        /// </summary>
        /// <param name="g"></param>
        /// <returns></returns>
        public DDocInfo GetByFileId(Guid g) {
            return dal.GetByFileId(g);
        }
		/// <summary>
        /// 插入数据
        /// </summary>
        /// <param name="obj">对象</param>
        /// <returns>返回：该条数据的主键Id</returns>
		public int Insert(DDocInfo obj) {
			return dal.Insert(obj);
		}
		
		/// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="obj"></param>
        /// <returns>返回：ture 成功，false 失败</returns>
		public bool Update(DDocInfo obj) {
			return dal.Update(obj);
		}
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="docId"></param>
        /// <returns>返回：ture 成功，false 失败</returns>
		public bool Delete(Int32 docId) {
			return dal.Delete(docId);
		}
        /// <summary>
        /// 获取某用户所有文档的总浏览量
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public int? GetViewCount(int userId) {
            return dal.GetViewCount(userId);
        }
        /// <summary>
        /// 批量更新被删除文件夹的文档
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="userCateId"></param>
        public void UpdateUserCatalog(int userId, int userCateId) {
            dal.UpdateUserCatalog(userId, userCateId);
        }
        /// <summary>
        /// 移动文档到文件夹
        /// </summary>
        /// <param name="docId"></param>
        /// <param name="folderId"></param>
        public void MoveFolder(int docId, int folderId) {
            dal.MoveFolder(docId, folderId);
        }
        /// <summary>
        /// 更新浏览量
        /// </summary>
        /// <param name="docId"></param>
        public void UpdateViewCount(int docId) {
            dal.UpdateViewCount(docId);
        }
        /// <summary>
        /// 更新评论量
        /// </summary>
        /// <param name="docId"></param>
        public void UpdateCommentCount(int docId) {
            dal.UpdateCommentCount(docId);
        }
        /// <summary>
        /// 更新顶数
        /// </summary>
        /// <param name="docId"></param>
        public void UpdateUpCount(int docId) {
            dal.UpdateUpCount(docId);
        }
        /// <summary>
        /// 更新收藏数量
        /// </summary>
        /// <param name="docId"></param>
        public void UpdateFavCount(int docId) {
            dal.UpdateFavCount(docId);
        }

        public IList<int> GetRelativeDocIds(int docId)
        {
            return dal.GetRelativeDocIds(docId);
        }
        /// <summary>
        /// 根据标签提取相关文档ID集合，25条
        /// </summary>
        /// <param name="docId"></param>
        /// <returns></returns>
        public IList<DDocInfo> GetRelativeList(int docId) {
            IList<int> docIds = GetRelativeDocIds(docId);
            int[] arr = ((List<int>)docIds).ToArray();
            if (arr.Length > 0)
            {
                Hashtable p = new Hashtable();
                p.Add("DocIds", arr);
                p.Add("IsAudit", true);
                return GetList(p, null, 0, 25);
            }
            else
                return null;
        }
        /// <summary>
        /// 获取推荐文档列表
        /// </summary>
        /// <returns></returns>
        public IList<DDocInfo> GetRecommendList(int first,int rows) {
            Hashtable p = new Hashtable();
            p.Add("IsRecommend",true);
            p.Add("IsAudit",true);
            return GetList(p, null, first, rows);
        }
        /// <summary>
        /// 获取热门文档，按浏览量从高到低排序
        /// </summary>
        /// <param name="first"></param>
        /// <param name="rows"></param>
        /// <returns></returns>
        public IList<DDocInfo> GetHotList(int first, int rows) {
            Hashtable p = new Hashtable();
            p.Add("IsAudit",true);
            return GetList(p, "ViewCount DESC", first, rows);
        }
        /// <summary>
        /// 重置文档转换标志
        /// </summary>
        /// <param name="docId"></param>
        public void UpdateConvertFlag(int docId)
        {
            dal.UpdateConvertFlag(docId);
        }
	}

}
