<%-- 
Name:	IBatisNetGen.BatisMap.cst
Version: 2007.02.08
Author: Yaojian  ( smrtk@hotmail.com )
Description: Generates SQL mapping xml for IBatis.Net (see ibatis.apache.org)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="CSBatisBuilder.cs" Inherits="TableTemplate" Debug="true"  Description="Generates IBatis map from a database table." %>

<%@ Assembly Name="System" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Src="CSBatisBuilder.cs" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.ComponentModel" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="CSBatisBuilder" %>
<script runat="template">
	protected override FileOption GetDefaultFileOption() {
		return FileSetOption.CreateDefaultBatisMapOption();
	}
</script>
<?xml version="1.0" encoding="utf-8" ?> 
<!--============================================================================
//	CAUTION: This file is generated by <% =CodeTemplateInfo.FileName %> at <% =CodeTemplateInfo.DateCreated %>
//				By xincai.wu
//===========================================================================-->
<sqlMap namespace="<% =Builder.EntityName %>"
	xmlns="http://ibatis.apache.org/mapping" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<alias>
		<typeAlias alias="<% =Builder.EntityName %>" type="TMM.Model.<% =Builder.EntityName %>,TMM.Models" />		
	</alias>

	<statements>

		<select id="<% =Builder.GetCountStmtId %>"  parameterClass="map" resultClass="System.Int32">
			SELECT count(*) FROM <% =Builder.TableName %>
			<dynamic prepend="WHERE">
			<%	for (int i = 0; i < Builder.NonPkColumns.Count; i ++) {
					ColumnInfo c = Builder.NonPkColumns[i];%>
				<isPropertyAvailable property="<%=c.ResultColumnName %>" prepend="AND">
					<% =c.SqlColumnName %> = #<%=c.ResultColumnName %>#
				</isPropertyAvailable>
<% 				} %>
			</dynamic>
		</select>
		

		<select id="GetList" parameterClass="map" resultClass="<% =Builder.EntityName %>">
			SELECT
<%				for (int i = 0; i < Builder.Columns.Count; i ++) {
					ColumnInfo c = Builder.Columns[i];%>
				<% 	if (i > 0) { %>, <% } %><% 	=c.SqlColumnName %>
<% 				} %> FROM 
			(SELECT
			<isPropertyAvailable property="Top" prepend="">
				Top (#Top#)
			</isPropertyAvailable>
			<isPropertyAvailable property="OrderBy" prepend="">
				ROW_NUMBER() OVER (order by $OrderBy$) as RowNumber,
			</isPropertyAvailable>
			*
			FROM <% =Builder.QualifiedTableName %>
			<dynamic prepend="WHERE">
			<%	for (int i = 0; i < Builder.NonPkColumns.Count; i ++) {
					ColumnInfo c = Builder.NonPkColumns[i];%>
				<isPropertyAvailable property="<%=c.ResultColumnName %>" prepend="AND">
					<% =c.SqlColumnName %> = #<%=c.ResultColumnName %>#
				</isPropertyAvailable>
<% 				} %>
			</dynamic>
			) t
			<dynamic prepend="WHERE">
				<isPropertyAvailable property="StartRecord" prepend="AND">
				RowNumber>#StartRecord#
				</isPropertyAvailable>
			</dynamic>
		</select>
		
		<select id="Get" parameterClass="Int32" resultClass="<% =Builder.EntityName %>">
			SELECT
<%				for (int i = 0; i < Builder.Columns.Count; i ++) {
					ColumnInfo c = Builder.Columns[i];%>
				<% 	if (i > 0) { %>, <% } %><% 	=c.SqlColumnName %>
<% 				} %>
			FROM <% =Builder.QualifiedTableName %>
			WHERE
				<% 	for (int i = 0; i < Builder.PkColumns.Count; i++) {
						ColumnInfo c = Builder.PkColumns[i];	%>
				<% 		if (i > 0) { %>AND <% } %>(<% =c.SqlColumnName %> = #<% =c.ResultColumnName %>#)
				<% 	} %>
		</select>
		
		

		
		<insert id="<% =Builder.InsertStmtId %>" parameterClass="<% =Builder.EntityName %>" resultClass="Int32">
			INSERT INTO <% =Builder.QualifiedTableName %> (
				<% 	for (int i = 0; i < Builder.NonPkColumns.Count; i++) { 
						ColumnInfo c = Builder.NonPkColumns[i]; %>
				<% 		if (i > 0) { %>,<% } %> <% =c.SqlColumnName %>
				<% 	} %>
			) VALUES (
				<% 	for (int i = 0; i < Builder.NonPkColumns.Count; i++) {
						ColumnInfo c = Builder.NonPkColumns[i];		%>
				<% 		if (i > 0) { %>,<% } %> #<% =c.ResultColumnName %>#
				<% 	} %>
			)
			
			SELECT @@IDENTITY
		</insert>

		<update id="<% =Builder.UpdateStmtId %>" parameterClass="<% =Builder.EntityName %>" resultClass="Int32">
			UPDATE <% =Builder.QualifiedTableName %> SET
				<% 	for (int i = 0; i < Builder.NonPkColumns.Count; i++) {
						ColumnInfo c = Builder.NonPkColumns[i]; 	%>
				<% 		if (i > 0) { %>,<% } %> <% =c.SqlColumnName %> = #<% =c.ResultColumnName %>#
				<% 	} %>
			WHERE
				<% 	for (int i = 0; i < Builder.PkColumns.Count; i++) {
						ColumnInfo c = Builder.PkColumns[i];	%>
				<% 		if (i > 0) { %>AND <% } %>(<% =c.SqlColumnName %> = #<% =c.ResultColumnName %>#)
				<% 	} %>
				
			SELECT @@rowcount
		</update>

		<delete id="Delete" parameterClass="int32" resultClass="Int32">
			DELETE FROM <% =Builder.QualifiedTableName %>
			WHERE
				<%	for (int i = 0; i < Builder.PkColumns.Count; i++) {
						ColumnInfo c = Builder.PkColumns[i];	%>
				<%		if (i > 0) { %>AND <% } %>(<% =c.SqlColumnName %> = #<% =c.ResultColumnName %>#)
				<%	} %>
				
			select @@rowcount
		</delete>
		
	</statements>
</sqlMap>
